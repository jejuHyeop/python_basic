# 자!! 프로그래밍에서 제일 어려운 반복문에 돌입했습니다!!
# 하지만, 이 부분을 넘기면 프로그래밍의 영역이 방대!!!! 하게 늘어납니다.
# 11 번 파일에서 반복문 부분을 한 번더 상기하고 와주세요!

# 수업시간에 python 의 자료형을 정리한 페이지 기억나시죠!
# 좌측에 문자열, 숫자, bool 
# 우측에 리스트, 튜플, 세트, 딕셔너리
# 이렇게 배치를 했는데요. 

# 우측의 4개의 자료형은 자료들의 자료형이기 때문이에요!!
# 즉, 문자열, 숫자, bool 에는 없는 "집합" 의 개념을 가지고 있어요

# 자료형들을 묶어놓은 것!! 입니다.
# 우선, 리스트 튜플에 대해서 배워볼게요

# 순서가 있는 자료형!! 리스트와 튜플

# 리스트와 튜플은 순서가 있다는 특징을 가지고 있습니다.
# 리스트는 대괄호 '[' 를 사용해서 나타내고, 튜플은 소괄호 '(' 를 사용하여 나타냅니다.

A = [1, 2, 'hello', "world", True]  
B = (4, False, 'a', "b", 4.3)

print(type(A))    # class 'list' 확인
print(type(B))    # class 'tuple' 확인

# 다음과 같이 list, tuple은  ',' 쉼표를 기준으로 숫자, 문자열, Bool 값과
# 같은 다양한 자료형들을 묶는 것을 알 수 있습니다.  
# '순서가 있다' 는 표현이 의미하는 것은 무엇일까요?

# 바로!! 이렇게 묶어놓은 자료들이 각각의 번호표가 있다는 것입니다.
# 이러한 번호표를 ★index(인덱스) 라고 합니다.
# 인덱스를 통해 각각의 자료에 접근이 가능합니다.
# 많은 프로그래밍 언어에서 인덱스는 0 부터 시작합니다.
'''
A = [1, 2, 'hello', "world", True]  

1 은 A 리스트에서 첫 번째 자료이기 때문에 index 는 0 이다.
2 은 A 리스트에서 두 번째 자료이기 때문에 index 는 1 이다.
'hello' 은 A 리스트에서 세 번째 자료이기 때문에 index 는 2 이다.
....
??? 은 A 리스트에서 N 번째 자료이기 때문에 index 는 N-1 이다.

'''
# 각각의 자료에 접근하는 방법은
# 리스트, 튜플의 이름[index]   입니다.
'''
A = [1, 2, 'hello', "world", True]  

1 은 A 리스트에서 첫 번째 자료이기 때문에 A[0] 이다.
2 은 A 리스트에서 두 번째 자료이기 때문에 A[1] 이다.
'hello' 은 A 리스트에서 세 번째 자료이기 때문에 A[2] 이다.
....
??? 은 A 리스트에서 N 번째 자료이기 때문에 A[N-1] 이다.

'''

A = [1, 2, 'hello', "world", True]  
B = (4, False, 'a', "b", 4.3)

print(A[0], A[2], A[4])
print(B[1], B[3])

# 자!! 그렇다면, 리스트와 튜플의 차이는 무었일까요?
# 바로 '자료의 변경이 가능한가?' 에 따라 차이가 있습니다.
# list 는 list 내의 자료를 변경할 수 있습니다.
# 이와 달리, tuple 은 tuple 내의 자료를 변경할 수 없습니다.

A[0] = 2  # 2 를 A 라는 list 의 index 이 0 인 곳에 대입한다.
B[1] = 3  # 3 을 B 라는 tuple 의 index 이 1 인 곳에 대입한다.

# 위의 코드를 실행해보면 70 번째 줄에서 error 가 발생하는 것을 알 수 있습니다.
# tuple 은 다음과 같이 변경할 수 없기 때문이지요!!

# 맞습니다! tuple 을 사용하는 이유로 변경불가능하는 특징이 큽니다!!
# 하지만, tuple 의 자료를 변경하고 싶다고요???
# 저희에게는 형변환이 있습니다.
# tuple > list로 변환 > 정보 수정 > tuple로 변환

B = (4, False, 'a', "b", 4.3)
print('변경 전 :',B)
B = list(B)
B[1] = 3
B = tuple(B)
print('변경 후 :',B)

