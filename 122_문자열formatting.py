# 문자열.format(자료)
# 변수를 분자열에 나타낼 때, 주로 사용!!!!!!
# 문자열 안에 빈칸을 뚫어주고, 괄호안에 빈칸에 들어갈 값을 넣어줌

A = 'world'
B = '!'
C = "hello {} {}".format(A,B)
print(C)

# ★★ format 의 장점1 : 빈칸에 들어갈 자료의 자료형을 고려하지 않아도 된다.
# print(1+'a') 는 에러를 발생한다.
# print(str(1)+'a') 를 해주어야 한다.

# ★★ format 의 장점2 : 출력형태를 일치시키는데 효과적이다.
# print(1,'a') 이와 같은 경우에 두 자료 사이에 공백이 생긴다.
# ※ sep 이라는 속성을 조정하면 되지만, 일일히 해주기 귀찮다.

# 문자열의 빈칸의 수와 format 에 넣어주는 자료의 수를 같이 해주면
# 좋지만, 정석은 다음과 같다.

# ★ 문자열에 빈칸의 수 <= format 안 괄호의 자료의 수
# 빈칸에 들어갈 자료를 인덱스로 설정해줄 수 있다.
# (권장 X, 실제로 빨간 밑줄이 쳐져있습니다.(경고, 빈칸보다 format 에 자료가 많습니다.)) 
A = 'world'
B = '!'
C = "~~"
D = "||"
E = 'hello {0} {3}'.format(A,B,C,D)
print(E)

# 더 좋은 표현으로는 f"{변수나 값}" 표현이 있다.

battery = 20
warning = f"battery 가 {battery}%{'남았습니다'}"
print(warning)