# 반복문에서 왜 리스트, 튜플을 배웠을까요?
# for 문의 기본구조 때문입니다.

'''
for ________ in ____________ :
    [  종속 문장 = 반복되는 부분  ]
'''
# 이때 첫번째 빈칸에는 반복간 사용될 변수가 들어갑니다.
# 두번째 빈칸에는 "iterable 자료형" 이 들어갑니다!!!!
# 종속문장이 반복되는 횟수는 두번째 빈칸, iterable 자료형의 자료의 개수입니다.

for i in [1,2,'hello',"!",True]:
    print(i)
# 위 코드를 실행해볼까요??
'''
1
2
hello
!
True
'''
# 가 출력될 것입니다. print(i) 를 했는데 말이죠!!
# 이 말은 i 라는 녀석이 뒤에 나오는  iterable 자료형에서
# 자료들에 대입되서 반복이 된다는 것을 의미합니다.
# 즉, 단순하게 반복을 의미하는 것이 아니라,
# 뒤에나오는 리스트나 튜플 내의 모든 요소에 접근하는 것이 i 라는 것입니다.
# 그렇기 때문에 반복횟수는 리스트, 튜플의 자료의 개수가 되는 것입니다.

for i in (1,2,3,4,5,6,7,8,9):
    print(i)
# 다음의 출력결과를 예상해보겠습니다.
print(1)
print(2)
print(3)
print(4)
print(5)
print(6)
print(7)
print(8)
print(9)
# 다음과 같은 형태로 출력될 것입니다.
# print 를 9번이나 써주기 보다 반복문을 통해서 
# 쉽게 코딩할 수 있습니다.
# 만약 1에서 1000 까지 출력하는 프로그램을 작성하기 위해선
# print 를 1000 번쓰거나, 1에서 1000 까지의 리스트를 만들어서 반복문을 
# 사용하는 방법이 있을 것입니다.

# 이 때!!!!!!!!!!!
#  iterable  자료형을 효과적으로 만들어주는 range 라는 기능을 배워보도록 하겠습니다.
A = range(100)
print(type(A)) # class 'range'
# range 라는 친구도  iterable 자료형입니다. (대표적인 자료형은 아니기에 제외시켰습니다.)
print(list(A))
# 0 에서부터 99 까지의 수가 리스트 형태로 묶여있는 것을 볼 수 있습니다.
# 이렇게 range(N) 은 0에서 N-1 까지의 iterable 자료형을 생성합니다.
# range 또한  iterable  자료형이기 때문에 for 에 두번째 괄호자리에 들어갈 수 있습니다.

for i in range(100):
    print(i)   # 0에서 99까지 출력

# range 의 확장 > range 라는 친구는 특이하게 3가지 모습을 가지고 있습니다.
# 이는 원형을 살펴보는 것을 추천합니다.
# range(A)     : 0 - (A-1)    간격 1
# range(A,B)   : A - (B-1)    간격 1
# range(A,B,C) : A - (B-1)    간격 C

range(10)     # 0-9
range(1,10)   # 1-9
range(1,10,2) # 1,3,5,7,9

# 직접 쳐보시기 바랍니다!

